KS.Map = undefined
KS.projection = undefined

KS.findLayerById = (id, map = KS.Map) ->
  layers = map.getLayers()
  i = 0
  while i < layers.getLength()
    tmp = layers.item(i)
    if tmp.get('id') == id
      return tmp
    i++
  null

KS.initializeMaps = (with_wms = true) ->
  if $('#map').size() == 0
    return

  proj4.defs 'EPSG:25833', '+proj=utm +zone=33 +ellps=GRS80 +units=m +no_defs'
  ol.proj.proj4.register proj4
  KS.maxZoom = <%= Settings::Map.max_zoom %>
  KS.projection = ol.proj.get('EPSG:25833')
  KS.projection.setExtent <%= Settings::Map.projection_25833.as_json %>
  defaultPosition = ol.proj.transform(<%= Settings::Map.center.as_json %>, 'EPSG:4326', KS.projection)
  defaultZoom = <%= Settings::Map.zoom %>

  $('#map').each (ix, m) ->
    elem = $(m)
    position = defaultPosition
    zoom = defaultZoom
    filter = elem.data('filter')
    extended_filter = elem.data('extended-filter')
    feature = null
    featureVector = null
    featureVectorUnclustered = null
    if elem.data('lat') > 0 && elem.data('lon') > 0
      position = ol.proj.transform([elem.data('lon'), elem.data('lat')], 'EPSG:4326', KS.projection)
      zoom = defaultZoom + 4
    if filter?
      featureVector = new (ol.layer.Vector)(
        id: 'features'
        source: new ol.source.Cluster
          distance: 55
          source: (feature = new KS.FeatureVector(filter, extended_filter, elem.data('controller')))
        style: KS.styles.featureStyle
      )
      featureVectorUnclustered = new (ol.layer.Vector)(
        id: 'features_unclustered'
        source: feature
        visible: false
      )
    else
      feature = new (ol.Feature)(new (ol.geom.Point)(position))
      featureSource = new (ol.source.Vector)(features: [feature])
      featureVector = new (ol.layer.Vector)(
        id: 'features'
        source: featureSource
        style: new (ol.style.Style) (
          image: new (ol.style.Icon) (
            anchorXUnits: 'pixels'
            anchorYUnits: 'pixels'
            anchor: [
              16
              50
            ]
            src: elem.data('icon')
            size: [
              56
              64
            ]
          )
        )
      )
    layers = [
      <% Settings::Map.layers.each do |layer| %>
      new (ol.layer.Tile)
        id: '<%= layer[:id] %>'
        source: new (ol.source.WMTS)
          url: '<%= layer[:url] %>'
          layer: '<%= layer[:layer] %>'
          matrixSet: '<%= layer[:matrix_set] %>'
          format: 'image/png'
          requestEncoding: 'REST'
          crossOrigin: 'anonymous' # crossOrigin-Key ist f√ºr die Karte beim  Druck von Meldungen relevant
          projection: KS.projection
          tileGrid: new (ol.tilegrid.WMTS)
            origin: ol.extent.getTopLeft(KS.projection.getExtent())
            resolutions: <%= layer[:resolutions] %>
            matrixIds: <%= layer[:matrix_ids] %>
        visible: <%= layer[:visible].present? %>
      <% end %>
    ]
    if with_wms
      <% Settings::Map.wms_layers&.each do |layer| %>
      layers.push new (ol.layer.Image)
        id: '<%= layer[:id] %>'
        source: new ol.source.ImageWMS
          url: '<%= layer[:url] %>'
          params:
            "LAYERS": '<%= layer[:content] %>'
            "FORMAT": '<%= layer[:format] %>'
        visible: <%= layer[:visible].present? %>
      <% end %>
    layers.push featureVector
    layers.push featureVectorUnclustered if featureVectorUnclustered
    KS.Map = new (ol.Map)(
      target: 'map'
      layers: layers
      view: new (ol.View)(
        projection: KS.projection
        center: position
        zoom: zoom
        maxZoom: KS.maxZoom
      )
    )
    KS.setFeatureCoordinatesToInput(feature)
    interaction = new ol.interaction.Translate(
      features: new ol.Collection([feature])
      hitTolerance: 10
    )
    if elem.data('position-input')? && elem.data('position-input') != '' && $(elem.data('position-input')).length > 0
      interaction.on 'translateend', (e) ->
        KS.setFeatureCoordinatesToInput(e.features.getArray()[0])
      KS.Map.addInteraction(interaction)

    setTimeout (->
      KS.Map.updateSize()
    ), 500

    addControls = (map, controller) ->
      map.on 'click', (e) ->
        return unless controller?
        map.forEachFeatureAtPixel e.pixel, (feature, layer) ->
          if feature
            features = feature.get('features')
            if features.length == 1
              controller = 'issues' if controller == 'jobs'
              KS.addMapSettingsToParam()
              $.ajax(url: "#{KS.controllerUrl(controller)}/#{features[0].get('id')}/edit", dataType: 'script')
            else if map.getView().getZoom() == KS.Map.getView().getMaxZoom()
              id_params = Array()
              $(features).each (ix, feature) ->
                id_params.push 'filter[only_number][]=' + feature.get('id')
              location.href = "#{KS.controllerUrl(controller)}?" + id_params.join('&')
            else
              # Zoom in
              map.getView().setCenter e.coordinate
              current_zoom = map.getView().getZoom()
              if current_zoom == undefined
                current_zoom = zoom
              map.getView().setZoom parseInt(current_zoom + 1)

      map.on 'dblclick', (e) ->
        features = KS.findLayerById('features').getSource().getFeatures()
        if features.length == 1
          pos = e.coordinate
          feature = features[0]
          feature.getGeometry().setCoordinates(pos)
          KS.setFeatureCoordinatesToInput(feature)
          e.preventDefault()

      map.on 'pointermove', (e) ->
        hover = map.forEachFeatureAtPixel e.pixel, (feature, layer) ->
          return true if feature
        e.map.getTargetElement().style.cursor = if hover then 'pointer' else ''

    addControls(KS.Map, elem.data('controller'))

KS.styles =
  featureAttribution: (feature) ->
    new ol.style.Text
      text: feature.get("attribution")
      font: '15px Glyphicons Halflings'
      offsetX: 28
      offsetY: -22
      rotation: Math.PI / -2
      fill: new ol.style.Fill
        color: '#ffffff'
      stroke: new ol.style.Stroke
        color: '#000000'
        width: 3

  featureStyle: (features) ->
    if (size = features.get('features').length) == 1
      feature = features.get('features')[0]
      features.setStyle new ol.style.Style
        image: new ol.style.Icon
          anchorXUnits: 'pixels'
          anchorYUnits: 'pixels'
          anchor: [
            6
            40
          ]
          src: feature.get('icon')
          text: KS.styles.featureAttribution(feature)
    else
      features.setStyle new ol.style.Style
        image: new ol.style.Icon
          anchorXUnits: 'pixels'
          anchorYUnits: 'pixels'
          anchor: [
            22
            22
          ]
          src: KS.imagePath('cluster')
        text: new ol.style.Text
          text: size.toString()
          font: 'bold 20px PT Sans, Helvetica Neue, Helvetica, Arial, sans-serif'
          fill: new ol.style.Fill
            color: '#000000'

KS.zoomToParamsOrFeaturesExtent = ->
  paramCenter = new URL(location.href).searchParams.get("center")
  paramZoom = new URL(location.href).searchParams.get("zoom")
  if paramCenter && paramCenter.length > 0 && paramZoom && paramZoom.length > 0
    KS.Map.getView().setCenter [parseFloat(paramCenter.split(',')[0]), parseFloat(paramCenter.split(',')[1])]
    KS.Map.getView().setZoom paramZoom
  else
    KS.Map.getView().fit KS.findLayerById('features_unclustered').getSource().getExtent(), KS.Map.getSize()
    KS.Map.getView().setZoom KS.Map.getView().getZoom() - 0.15

class KS.FeatureVector
  constructor: (filter, extended_filter, controller) ->
    vector = new ol.source.Vector
      format: new ol.format.TopoJSON
      loader: (extent, resolution, projection) ->
        new KS.FeatureData(filter, extended_filter, controller, vector)
    vector.on 'change', (event) -> KS.zoomToParamsOrFeaturesExtent()
    return vector

class KS.FeatureData
  constructor: (filter, extended_filter, controller, vector) ->
    data = { filter: filter }
    $.ajax(
      url: KS.controllerUrl(controller)
      data: Object.assign(data, { extended_filter: extended_filter })
      dataType: 'json'
    ).done (response) ->
      features = new Array
      $.each response, (index, elem) ->
        attribution = ''
        coord = ol.proj.transform([elem.lon, elem.lat], 'EPSG:4326', KS.projection)
        f = new ol.Feature(
          id: elem.id
          geometry: new ol.geom.Point(coord)
          icon: elem.map_icon
          attribution: attribution
        )
        f.setId elem.id
        features.push f
      vector.addFeatures features

KS.setFeatureCoordinatesToInput = (feature) ->
  map = $('#' + KS.Map.getTarget())
  return unless map.data('position-input')? && map.data('position-input') != ''
  coordinates = feature.getGeometry().getCoordinates()
  position = 'POINT(' + ol.proj.transform(coordinates, KS.projection, 'EPSG:4326').toString().replace(',', ' ') + ')'
  $(map.data('position-input')).val(position)

KS.imagePath = (type) ->
  $("#image-sources img##{ type }").attr 'src'

KS.controllerUrl = (controller) ->
  switch controller
    when 'delegations' then '<%= Rails.application.routes.url_helpers.delegations_path %>'
    when 'issues' then '<%= Rails.application.routes.url_helpers.issues_path %>'
    when 'jobs' then '<%= Rails.application.routes.url_helpers.jobs_path %>'

KS.addMapSettingsToParam = ->
  newUrl = new URL(window.location.href)
  newUrl.searchParams.set 'center', KS.Map.getView().getCenter()
  newUrl.searchParams.set 'zoom', KS.Map.getView().getZoom()
  history.pushState {}, null, newUrl

$ ->
  $(document).on 'click', '.toggle-map', ->
    layers = KS.Map.getLayers().getArray()
    if parseInt($(@).val()) == 1
      layers[1].setVisible(true)
      layers[0].setVisible(false)
    else
      layers[0].setVisible(true)
      layers[1].setVisible(false)
  $(document).on 'click', '.btn-link.toggle', (e) ->
    e.preventDefault()
