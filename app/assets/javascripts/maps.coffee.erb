KS.Map = undefined;
KS.projection = undefined

KS.findLayerById = (id, map = KS.Map) ->
  layers = map.getLayers()
  i = 0
  while i < layers.getLength()
    tmp = layers.item(i)
    if tmp.get('id') == id
      return tmp
    i++
  null

KS.initializeMaps = ->
  if $('#map').size() == 0
    return

  proj4.defs 'EPSG:25833', '+proj=utm +zone=33 +ellps=GRS80 +units=m +no_defs'
  ol.proj.proj4.register proj4
  KS.projection = ol.proj.get('EPSG:25833')
  KS.projection.setExtent <%= Settings::Map.projection_25833.as_json %>
  defaultPosition = ol.proj.transform(<%= Settings::Map.center.as_json %>, 'EPSG:4326', KS.projection)
  defaultZoom = <%= Settings::Map.zoom %>

  $('#map').each (ix, m) ->
    elem = $(m)
    position = defaultPosition
    zoom = defaultZoom
    if elem.data('lon') > 0 && elem.data('lat') > 0
      position = ol.proj.transform([
        elem.data('lon')
        elem.data('lat')
      ], 'EPSG:4326', KS.projection)
      zoom = (defaultZoom + 4)

    feature = new (ol.Feature)(new (ol.geom.Point)(position))
    featureSource = new (ol.source.Vector)(features: [feature])
    featureVector = new (ol.layer.Vector)(
      id: 'features'
      source: featureSource
      style: new (ol.style.Style) (
        image: new (ol.style.Icon) (
          anchorXUnits: 'pixels'
          anchorYUnits: 'pixels'
          anchor: [
            16
            50
          ]
          src: elem.data('icon')
          size: [
            56
            64
          ]
        )
      )
    )
    KS.Map = new (ol.Map)(
      target: 'map'
      layers: [
        <% Settings::Map.layers.each do |layer| %>
        new (ol.layer.Tile)(source: new (ol.source.WMTS)(
          url: '<%= layer[:url] %>'
          layer: '<%= layer[:layer] %>'
          matrixSet: '<%= layer[:matrix_set] %>'
          format: 'image/png'
          requestEncoding: 'REST'
          projection: KS.projection
          tileGrid: new (ol.tilegrid.WMTS)(
            origin: ol.extent.getTopLeft(KS.projection.getExtent())
            resolutions: <%= layer[:resolutions] %>
            matrixIds: <%= layer[:matrix_ids] %>)))
        <% end %>
        featureVector
      ]
      view: new (ol.View)(
        projection: KS.projection
        center: position
        zoom: zoom
      )
    )

    interaction = new ol.interaction.Translate(
      features: new ol.Collection([feature])
      hitTolerance: 10
    )
    interaction.on 'translateend', (e) ->
      KS.setFeatureCoordinatesToInput(e.features.getArray()[0])
    KS.Map.addInteraction interaction

    window.setTimeout (->
      KS.Map.updateSize()
    ), 500


KS.setFeatureCoordinatesToInput = (feature) ->
  coordinates = feature.getGeometry().getCoordinates()
  map = $('#' + KS.Map.getTarget())
  position = 'POINT(' + ol.proj.transform(coordinates, KS.projection, 'EPSG:4326').toString().replace(',', ' ') + ')'
  $(map.data('position-input')).val(position)
  
